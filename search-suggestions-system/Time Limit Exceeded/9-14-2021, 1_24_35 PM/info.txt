{"id":554610766,"lang":"cpp","time":"9 months, 1 week","timestamp":1631597075,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/554610766/","is_pending":"Not Pending","title":"Search Suggestions System","memory":"N/A","code":"class trie_node{\npublic:\n    bool isend;\n    vector<trie_node*> link;\n    trie_node(){\n        isend=false;\n        link.assign(26,nullptr);\n    }\n};\nclass Trie {\npublic:\n    /** Initialize your data structure here. */\n    trie_node* root;\n    trie_node* trie_pointer;\n    int counter;\n    vector<string> strs;\n    Trie() {\n        root=new trie_node();\n    }\n    /** Inserts a word into the trie. */\n    void insert(string word) {\n        counter=0;\n        int m=word.size();\n        trie_pointer=root;\n        while(counter<word.size()){\n            if(trie_pointer->link[word[counter]-'a']==nullptr){\n                trie_pointer->link[word[counter]-'a']=new trie_node();\n            }\n            trie_pointer=trie_pointer->link[word[counter]-'a'];\n            counter++;\n        }\n        trie_pointer->isend=true;\n    }\n    \n    /** Returns if the word is in the trie. */\n    bool search(string word) {\n        trie_pointer=root;\n        counter=0;\n        while(trie_pointer!=nullptr && counter<word.size()){\n            trie_pointer=trie_pointer->link[word[counter++]-'a'];\n        }\n        if(trie_pointer==nullptr) return false;\n        if(trie_pointer->isend==false) return false;\n        return true;\n    }\n    \n    /** Returns if there is any word in the trie that starts with the given prefix. */\n    bool startsWith(string prefix) {\n        trie_pointer=root;\n        counter=0;\n        while(trie_pointer!=nullptr && counter<prefix.size()){\n            trie_pointer=trie_pointer->link[prefix[counter++]-'a'];\n        }\n        if(trie_pointer==nullptr) return false;\n        else{\n            if(trie_pointer->isend==true) return true;\n            for(int i=0;i<26;i++){\n                if(trie_pointer->link[i]!=nullptr){\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n\n    vector<string> related(string prefix){\n        strs.clear();\n        vector<string> ans;\n        if(startsWith(prefix)==false){\n            return strs;\n        }\n        trie_pointer = root;\n        string now = \"\";\n        related_u(trie_pointer,strs,now,prefix,0);\n        for(int i=0;i<3 && i<strs.size();i++){\n            ans.emplace_back(strs[i]);\n        }\n        return ans;\n    }\n\n    void related_u(trie_node* r,vector<string>& strs,string now,string prefix,int ind){\n        if(ind<prefix.size()){\n            now+=prefix[ind];\n            related_u(r->link[prefix[ind]-'a'],strs,now,prefix,ind+1);\n        }\n        else{\n            if(r->isend==true){\n                strs.emplace_back(now);\n            }\n            for(int i=0;i<26;i++){\n                if(r->link[i]!=nullptr){\n                    now+=(char)(i+'a');\n                    related_u(r->link[i],strs,now,prefix,ind);\n                    now.pop_back();\n                }\n            }\n        }\n    }\n};\nclass Solution {\npublic:\n    vector<vector<string>> suggestedProducts(vector<string>& p, string s) {\n        Trie t;\n        vector<vector<string>> ans;\n        vector<string> tmp;\n        string now = \"\";\n        for(int i=0;i<p.size();i++){\n            t.insert(p[i]);\n        }\n        for(int i=0;i<s.size();i++){\n            now+=s[i];\n            ans.emplace_back(t.related(now));\n        }\n        return ans;\n    }\n};","compare_result":"11111111111111111111111111111111111111100","title_slug":"search-suggestions-system"}