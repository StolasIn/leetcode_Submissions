{"id":470982598,"lang":"cpp","time":"1 year, 3 months","timestamp":1616415842,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/470982598/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"23.3 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n\nclass Solution {\npublic:\n    int st1,st2;\n    int cnt;\n    vector<vector<TreeNode*>> cmp;\n    void dfs(TreeNode* root,vector<TreeNode*>& now){\n        if(root==nullptr || cnt>=2) return;\n        if(root->val==st1 || root->val==st2){\n            cnt++;\n            now.emplace_back(root);\n            cmp.emplace_back(now);\n            now.pop_back();\n            if(cnt>=2) return;\n        }\n        now.emplace_back(root);\n        dfs(root->left,now);\n        dfs(root->right,now);\n        now.pop_back();\n    }\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        vector<TreeNode*> now;\n        st1=p->val;\n        st2=q->val;\n        cnt=0;\n        bool flag=true;\n        dfs(root,now);\n        int i;\n        int m=min(cmp[0].size(),cmp[1].size());\n        for(i=0;i<m;i++){\n            if(cmp[0][i]->val!=cmp[1][i]->val){\n                flag=false;\n                break;\n            }\n        }\n        return cmp[0][i-1];\n    }\n};","compare_result":"111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree"}