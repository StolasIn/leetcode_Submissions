{"id":495356717,"lang":"cpp","time":"1 year, 1 month","timestamp":1621433810,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/495356717/","is_pending":"Not Pending","title":"Binary Tree Cameras","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int dp[2021][2];\n    void dfs(TreeNode* r,int now){\n        if(r==nullptr) return;\n        dp[now][0]=dp[now][1]=0;\n        dfs(r->left,now*2);\n        dfs(r->right,now*2+1);\n        dp[now/2][0]+=dp[now][1];\n        dp[now/2][1]+=min(dp[now][1],dp[now][0]);\n        dp[now/2][1]++;\n    }\n    int minCameraCover(TreeNode* root) {\n        dfs(root,1);\n        return min(dp[1][0],dp[1][1]);\n    }\n};","compare_result":"11000110110010000000010011011111111011001001111001001101111111101101101011111010001111011101111010010000000000101101011001111101111101001101000000100000001000100000000000","title_slug":"binary-tree-cameras"}