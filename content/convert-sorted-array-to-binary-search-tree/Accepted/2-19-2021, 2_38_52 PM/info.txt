{"id":457886105,"lang":"cpp","time":"1 year, 4 months","timestamp":1613716732,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/457886105/","is_pending":"Not Pending","title":"Convert Sorted Array to Binary Search Tree","memory":"21.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* part(vector<int>& n,int l,int r){\n        if(l>r) return nullptr;\n        TreeNode* root=new TreeNode(n[(l+r+1)/2]);\n        root->left=part(n,l,(l+r+1)/2-1);\n        root->right=part(n,(l+r+1)/2+1,r);\n        return root;\n    }\n    TreeNode* sortedArrayToBST(vector<int>& nums) {\n        if(nums.size()==0) return nullptr;\n        if(nums.size()==1){\n            return new TreeNode(nums[0]);\n        }\n        int m=nums.size();\n        TreeNode* root=new TreeNode(nums[(m)/2]);\n        root->left=part(nums,0,(m)/2-1);\n        root->right=part(nums,(m)/2+1,m-1);\n        return root;\n    }\n};","compare_result":"1111111111111111111111111111111","title_slug":"convert-sorted-array-to-binary-search-tree"}