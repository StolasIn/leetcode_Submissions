{"id":452726691,"lang":"cpp","time":"1 year, 4 months","timestamp":1612619135,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/452726691/","is_pending":"Not Pending","title":"Linked List Random Node","memory":"16.7 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    /** @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\n    vector<int> v;\n    Solution(ListNode* head) {\n        while(head!=nullptr){\n            v.emplace_back(head->val);\n            head=head->next;\n        }\n    }\n    \n    /** Returns a random node's value. */\n    int getRandom() {\n        return v[rand()%v.size()];\n    }\n};\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution* obj = new Solution(head);\n * int param_1 = obj->getRandom();\n */","compare_result":"11111111","title_slug":"linked-list-random-node"}