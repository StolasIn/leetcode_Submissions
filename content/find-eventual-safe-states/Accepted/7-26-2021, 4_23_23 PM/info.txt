{"id":528484434,"lang":"cpp","time":"11Â months","timestamp":1627287803,"status_display":"Accepted","runtime":"144 ms","url":"/submissions/detail/528484434/","is_pending":"Not Pending","title":"Find Eventual Safe States","memory":"47.3 MB","code":"class Solution {\npublic:\n    vector<int> vis;\n    bool dfs(vector<vector<int>>& g,vector<bool>& v,int now){\n        if(vis[now]!=-1) return vis[now];\n        if(v[now]==true) return false;\n        if(g[now].size()==0){\n            return vis[now]=true;\n        }\n        else{\n            bool flag=true;\n            for(int i=0;i<g[now].size();i++){\n                v[now]=true;\n                flag&=dfs(g,v,g[now][i]);\n                v[now]=false;\n            }\n            return vis[now]=flag;\n        }\n    }\n    vector<int> eventualSafeNodes(vector<vector<int>>& g) {\n        vis.assign(g.size(),-1);\n        vector<bool> v(g.size(),false);\n        vector<int> ans;\n        for(int i=0;i<g.size();i++){\n            if(dfs(g,v,i)){\n                ans.emplace_back(i);\n            }\n        }\n        return ans;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-eventual-safe-states"}