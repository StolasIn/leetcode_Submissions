{"id":512974237,"lang":"cpp","time":"12Â months","timestamp":1624618479,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/512974237/","is_pending":"Not Pending","title":"Redundant Connection","memory":"8.8 MB","code":"class dset{\npublic:\n    dset(){}\n    dset(int x){\n        parent=vector<int>(x,-1);\n    }\n    void union_node(int x,int y){\n        int m=find(x);\n        int n=find(y);\n        if(m==n && m!=-1) return;\n        if(parent[m]>parent[n]){\n            parent[n]+=parent[m];\n            parent[m]=n;\n        }\n        else{\n            parent[m]+=parent[n];\n            parent[n]=m;\n        }\n    }\n    int find(int x){\n        int x1=x;\n        while(parent[x]>=0){\n            x=parent[x];\n        }\n        int x2;\n        while(parent[x1]>=0){\n            x2=x1;\n            x1=parent[x1];\n            parent[x2]=x;\n        }\n        return x;\n    }\n    int set_size(int x){\n        return -parent[find(x)];\n    }\n    void print_parent(){\n        for(int i=0;i<parent.size();i++){\n            printf(\"%3d\",i);\n        }\n        cout<<endl;\n        for(int i=0;i<parent.size();i++){\n            printf(\"%3d\",parent[i]);\n        }\n        cout<<endl;\n    }\n    void resize(int x){\n        parent.assign(x+1,-1);\n    }\nprivate:\n    vector<int> parent;\n};\nclass Solution {\npublic:\n    dset t;\n    vector<int> findRedundantConnection(vector<vector<int>>& e) {\n        int m=e.size();\n        t.resize(1000);\n        for(int i=0;i<m;i++){\n            if(t.find(e[i][0])==t.find(e[i][1])){\n                return e[i];\n            }\n            t.union_node(e[i][0],e[i][1]);\n        }\n        return e[0];\n    }\n};","compare_result":"111111111111111111111111111111111111111","title_slug":"redundant-connection"}