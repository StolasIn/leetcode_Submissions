{"id":534979392,"lang":"cpp","time":"10 months, 2 weeks","timestamp":1628388610,"status_display":"Accepted","runtime":"163 ms","url":"/submissions/detail/534979392/","is_pending":"Not Pending","title":"Partition Array into Disjoint Intervals","memory":"94.1 MB","code":"class Solution {\npublic:\n    int partitionDisjoint(vector<int>& nums) {\n        ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n        int partitionIdx = 0, maxInLeft = nums[0], maxSoFar = nums[0];\n        for (int i = 1; i < nums.size(); i++) {\n            maxSoFar = max(maxSoFar, nums[i]);\n            // 'maxInLeft' is the max value in the left partition [0, partitionIdx]\n            // If it is a valid partition, then every value from 'partitionIdx + 1' to end\n            // should be >= 'maxInLeft'. But if nums[i] < maxInLeft, it means we have to\n            // incorporate nums[i] to the left partition and update 'partitionIdx' to i.\n            if (nums[i] < maxInLeft) {\n                maxInLeft = maxSoFar;\n                partitionIdx = i;\n            }\n        }\n        return partitionIdx + 1;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111","title_slug":"partition-array-into-disjoint-intervals"}