{"id":457601351,"lang":"cpp","time":"1 year, 4 months","timestamp":1613659103,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/457601351/","is_pending":"Not Pending","title":"Perfect Squares","memory":"6.3 MB","code":"class Solution {\npublic:\n    int numSquares(int n) {\n    if (n <= 0)\n    {\n        return 0;\n    }\n\n    // cntPerfectSquares[i] = the least number of perfect square numbers \n    // which sum to i. Since cntPerfectSquares is a static vector, if \n    // cntPerfectSquares.size() > n, we have already calculated the result \n    // during previous function calls and we can just return the result now.\n    static vector<int> cntPerfectSquares({0});\n\n    // While cntPerfectSquares.size() <= n, we need to incrementally \n    // calculate the next result until we get the result for n.\n    while (cntPerfectSquares.size() <= n)\n    {\n        int m = cntPerfectSquares.size();\n        int cntSquares = INT_MAX;\n        for (int i = 1; i*i <= m; i++)\n        {\n            cntSquares = min(cntSquares, cntPerfectSquares[m - i*i] + 1);\n        }\n\n        cntPerfectSquares.push_back(cntSquares);\n    }\n\n    return cntPerfectSquares[n];\n    }\n};","compare_resulttitle_slug":"perfect-squares"}