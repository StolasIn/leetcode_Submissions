{"id":445057039,"lang":"cpp","time":"1 year, 5 months","timestamp":1611067093,"status_display":"Accepted","runtime":"176 ms","url":"/submissions/detail/445057039/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"206.8 MB","code":"class Trie {\npublic:\n    /** Initialize your data structure here. */\n    unordered_map<string,vector<string>> map;\n    Trie() {\n        \n    }\n    \n    /** Inserts a word into the trie. */\n    void insert(string word) {\n        string str=\"\";\n        for(int i=0;i<word.size();i++){\n            str+=word[i];\n            map[str].push_back(word);\n        }\n    }\n    \n    /** Returns if the word is in the trie. */\n    bool search(string word) {\n        auto iter = map.find(word);\n        if(iter!=map.end()){\n            for(int i=0;i<iter->second.size();i++){\n                if(iter->second[i]==word) return true;\n            }\n        }\n        return false;\n    }\n    \n    /** Returns if there is any word in the trie that starts with the given prefix. */\n    bool startsWith(string prefix) {\n        if(map.find(prefix)!=map.end()) return true;\n            return false;\n    }\n};\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie* obj = new Trie();\n * obj->insert(word);\n * bool param_2 = obj->search(word);\n * bool param_3 = obj->startsWith(prefix);\n */","compare_result":"111111111111111","title_slug":"implement-trie-prefix-tree"}