{"id":476272839,"lang":"cpp","time":"1 year, 2 months","timestamp":1617522049,"status_display":"Accepted","runtime":"60 ms","url":"/submissions/detail/476272839/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"45 MB","code":"struct TrieNode{\n    bool is_end=0;\n    TrieNode *children[26];\n    \n    TrieNode() {\n        is_end = false;\n        \n        for (int i = 0; i < 26; i++)\n            children[i] = NULL;\n    }\n};\n\nTrieNode* root;\n\nclass Trie {\npublic:\n    /** Initialize your data structure here. */\n    Trie() {\n        root=new TrieNode();\n    }\n    \n    /** Inserts a word into the trie. */\n    void insert(string word) {\n        int n=word.size();\n        TrieNode* curr=root;\n        \n        for(int i=0;i<n;i++)\n        {\n            int val=word[i]-'a';\n            if(curr->children[val]==NULL)\n                curr->children[val]=new TrieNode();\n            curr=curr->children[val];\n        }\n                     \n        curr->is_end=1;\n    }\n    \n    /** Returns if the word is in the trie. */\n    bool search(string word) {\n        int  n=word.size();\n        TrieNode* curr=root;\n        bool is_end=0;\n        for(int i=0;i<n;i++)\n        {\n            int val=word[i]-'a';\n            curr=curr->children[val];  \n            if(curr==NULL)\n                return 0;     \n        }\n        return curr->is_end;\n    }\n    \n    /** Returns if there is any word in the trie that starts with the given prefix. */\n    bool startsWith(string word) {\n        int  n=word.size();\n        TrieNode* curr=root;\n        for(int i=0;i<n;i++)\n        {\n            int val=word[i]-'a';\n            if(curr==NULL || curr->children[val]==NULL)\n                return 0;\n            curr=curr->children[val];            \n        }\n        return 1;        \n    }\n};","compare_result":"111111111111111","title_slug":"implement-trie-prefix-tree"}