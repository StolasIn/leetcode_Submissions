{"id":539648412,"lang":"cpp","time":"10 months, 1 week","timestamp":1629165673,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/539648412/","is_pending":"Not Pending","title":"Flip Equivalent Binary Trees","memory":"12.1 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool flipEquiv(TreeNode* root1, TreeNode* root2) {\n        if(root1==nullptr && root2==nullptr){\n            return true;\n        }\n        if(root1==nullptr || root2==nullptr || root1->val!=root2->val){\n            return false;\n        }\n        return (flipEquiv(root1->left,root2->left) && flipEquiv(root1->right,root2->right))\n                || (flipEquiv(root1->left,root2->right) && flipEquiv(root1->right,root2->left));\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"flip-equivalent-binary-trees"}