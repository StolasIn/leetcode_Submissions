{"id":646023100,"lang":"cpp","time":"4Â months","timestamp":1645454021,"status_display":"Accepted","runtime":"21 ms","url":"/submissions/detail/646023100/","is_pending":"Not Pending","title":"Populating Next Right Pointers in Each Node","memory":"16.8 MB","code":"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* left;\n    Node* right;\n    Node* next;\n\n    Node() : val(0), left(NULL), right(NULL), next(NULL) {}\n\n    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}\n\n    Node(int _val, Node* _left, Node* _right, Node* _next)\n        : val(_val), left(_left), right(_right), next(_next) {}\n};\n*/\n\nclass Solution {\npublic:\n    vector<Node*> map = vector<Node*>(20);\n    void con(Node* r,int h){\n        if(r==nullptr){\n            return;\n        }\n        r->next = nullptr;\n        if(map[h]!=nullptr){\n            map[h]->next = r;\n            map[h] = r;\n        }\n        else{\n            map[h] = r;\n        }\n        con(r->left,h+1);\n        con(r->right,h+1);\n    }\n    Node* connect(Node* root) {\n        con(root,0);\n        return root;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"populating-next-right-pointers-in-each-node"}