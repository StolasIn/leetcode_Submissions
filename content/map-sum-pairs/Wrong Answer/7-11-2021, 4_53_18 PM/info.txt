{"id":520709089,"lang":"cpp","time":"11 months, 2 weeks","timestamp":1625993598,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/520709089/","is_pending":"Not Pending","title":"Map Sum Pairs","memory":"N/A","code":"class trie_node{\npublic:\n    bool isend;\n    vector<trie_node*> link;\n    int val;\n    trie_node(){\n        isend=false;\n        val=0;\n        link.assign(26,nullptr);\n    }\n};\nclass Trie {\npublic:\n    /** Initialize your data structure here. */\n    trie_node* root;\n    trie_node* trie_pointer;\n    int counter;\n    Trie() {\n        root=new trie_node();\n    }\n    /** Inserts a word into the trie. */\n    void insert(string word,int val) {\n        counter=0;\n        int m=word.size();\n        trie_pointer=root;\n        while(counter<word.size()){\n            if(trie_pointer->link[word[counter]-'a']==nullptr){\n                trie_pointer->link[word[counter]-'a']=new trie_node();\n            }\n            trie_pointer->link[word[counter]-'a']->val+=val;\n            trie_pointer=trie_pointer->link[word[counter]-'a'];\n            counter++;\n        }\n        trie_pointer->isend=true;\n    }\n    \n    /** Returns if the word is in the trie. */\n    int search(string word) {\n        trie_pointer=root;\n        counter=0;\n        while(trie_pointer!=nullptr && counter<word.size()){\n            trie_pointer=trie_pointer->link[word[counter++]-'a'];\n        }\n        /*if(trie_pointer==nullptr) return false;\n        if(trie_pointer->isend==false) return false;*/\n        if(trie_pointer==nullptr) return 0;\n        return trie_pointer->val;\n    }\n    \n    /** Returns if there is any word in the trie that starts with the given prefix. */\n    bool startsWith(string prefix) {\n        trie_pointer=root;\n        counter=0;\n        while(trie_pointer!=nullptr && counter<prefix.size()){\n            trie_pointer=trie_pointer->link[prefix[counter++]-'a'];\n        }\n        if(trie_pointer==nullptr) return false;\n        else{\n            if(trie_pointer->isend==true) return true;\n            for(int i=0;i<26;i++){\n                if(trie_pointer->link[i]!=nullptr){\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n};\nclass MapSum {\npublic:\n    /** Initialize your data structure here. */\n    Trie t;\n    MapSum() {\n        \n    }\n    \n    void insert(string key, int val) {\n        t.insert(key,val);\n    }\n    \n    int sum(string prefix) {\n        return t.search(prefix);\n    }\n};\n\n/**\n * Your MapSum object will be instantiated and called as such:\n * MapSum* obj = new MapSum();\n * obj->insert(key,val);\n * int param_2 = obj->sum(prefix);\n */","compare_result":"1110100010000000000000000000000001","title_slug":"map-sum-pairs"}