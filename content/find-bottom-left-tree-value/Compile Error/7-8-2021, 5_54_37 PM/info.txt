{"id":519218274,"lang":"cpp","time":"11 months, 2 weeks","timestamp":1625738077,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/519218274/","is_pending":"Not Pending","title":"Find Bottom Left Tree Value","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int findBottomLeftValue(TreeNode* root) {\n        if(root-left==nullptr && root->right==nullptr) return root->val;\n        deque<pair<TreeNode*,int>> de;\n        vector<pair<int,int>> now;\n        de.push_back(pair<TreeNode*,int>(root,0));\n        while(de.empty()==false){\n            auto tmp=de.front();\n            now.emplace_back(pair<int,int>(tmp.first->val,tmp.second));\n            de.pop_front();\n            if(tmp.first->left!=nullptr){\n                de.push_back(pair<TreeNode*,int>(tmp.first->left,tmp.second+1));\n            }\n            if(tmp.first->right!=nullptr){\n                de.push_back(pair<TreeNode*,int>(tmp.first->right,tmp.second+1));\n            }\n        }\n        int ma=now[now.size()-1].second;\n        for(int i=now.size()-1;i>=0;i--){\n            if(ma!=now[i].second){\n                ma=now[i+1].first;\n                break;\n            }\n        }\n        return ma;\n    }\n};","compare_result":null,"title_slug":"find-bottom-left-tree-value"}