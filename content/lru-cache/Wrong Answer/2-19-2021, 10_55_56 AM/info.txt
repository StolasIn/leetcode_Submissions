{"id":457807652,"lang":"cpp","time":"1 year, 4 months","timestamp":1613703356,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/457807652/","is_pending":"Not Pending","title":"LRU Cache","memory":"N/A","code":"class LRUCache {\npublic:\n    unordered_map<int,int> map;\n    vector<int> recent;\n    int s;\n    LRUCache(int capacity) {\n        s=capacity;\n    }\n    \n    int get(int key) {\n        if(map.find(key)==map.end()){\n            return -1;\n        }\n        else{\n            return map[key];\n        }\n    }\n    \n    void put(int key, int value) {\n        if(map.find(key)==map.end()){\n            if(map.size()<s){\n                recent.emplace_back(key);\n                map[key]=value;\n            }\n            else{\n                auto i=recent.back();\n                recent.pop_back();\n                map.erase(i);\n                map[key]=value;\n            }\n        }\n        else{\n            map[key]=value;\n        }\n        \n    }\n};\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache* obj = new LRUCache(capacity);\n * int param_1 = obj->get(key);\n * obj->put(key,value);\n */","compare_result":"11111110111101000000","title_slug":"lru-cache"}