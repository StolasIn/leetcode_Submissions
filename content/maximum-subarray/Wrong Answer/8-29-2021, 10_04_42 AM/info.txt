{"id":545859494,"lang":"java","time":"9 months, 3 weeks","timestamp":1630202682,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/545859494/","is_pending":"Not Pending","title":"Maximum Subarray","memory":"N/A","code":"class Solution {\n    public int maxSubArray(int[] nums) {\n        int m = nums.length;\n        if(m==0) return 0;\n        else if(m==1) return Math.max(0,nums[0]);\n        else if(m==2){\n            return Math.max(nums[0]+nums[1],Math.max(nums[0],nums[1]));\n        }\n        int[] left=Arrays.copyOfRange(nums, 0, m/2);\n        int[] right=Arrays.copyOfRange(nums, m/2+1, m);\n        int l=maxSubArray(left),r=maxSubArray(right);\n        int mal=nums[m/2],mar=nums[(m/2)+1];\n        int sum=0;\n        for(int i=m/2;i>=0;i--){\n            sum+=nums[i];\n            mal=Math.max(mal,sum);\n        }\n        sum=0;\n        for(int i=(m/2)+1;i<m;i++){\n            sum+=nums[i];\n            mar=Math.max(mar,sum);\n        }\n        return Math.max(mal+mar,Math.max(l,r));\n    }\n}","compare_result":"11110011111101111100001011111111101111111010011101111111110011111011011101110111011111101110111100111111111111111111010110011111111101111111011100011111111111101001101011111111111111111110111111111101111","title_slug":"maximum-subarray"}