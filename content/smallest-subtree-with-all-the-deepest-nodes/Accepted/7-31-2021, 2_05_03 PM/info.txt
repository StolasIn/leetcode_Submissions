{"id":530931466,"lang":"cpp","time":"10 months, 3 weeks","timestamp":1627711503,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/530931466/","is_pending":"Not Pending","title":"Smallest Subtree with all the Deepest Nodes","memory":"16.5 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    unordered_map<int,int> map;\n    int dfs1(TreeNode* root){\n        if(root==nullptr) return 0;\n        int x=dfs1(root->left);\n        int y=dfs1(root->right);\n        if(x==y){\n            map[root->val]=0;\n        }\n        else if(x>y){\n            map[root->val]=1;   \n        }\n        else{\n            map[root->val]=-1;\n        }\n        return max(x,y)+1;\n    }\n    TreeNode* dfs2(TreeNode* root){\n        if(map[root->val]==0){\n            return root;\n        }\n        else if(map[root->val]==1){\n            return dfs2(root->left);\n        }\n        else{\n            return dfs2(root->right);\n        }\n    }\n    TreeNode* subtreeWithAllDeepest(TreeNode* root) {\n        dfs1(root);\n        return dfs2(root);\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"smallest-subtree-with-all-the-deepest-nodes"}