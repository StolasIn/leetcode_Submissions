{"id":658912512,"lang":"cpp","time":"3 months, 1 week","timestamp":1647147043,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/658912512/","is_pending":"Not Pending","title":"Design Twitter","memory":"7.1 MB","code":"class Twitter {\npublic:\n    Twitter() {\n        time = 0;\n        maxFeed = 10;     \n    }\n\n    void postTweet(int userId, int tweetId) {\n        tweets[userId].push_back({time++, tweetId});\n        if (tweets[userId].size() > maxFeed)  \n            tweets[userId].pop_front();\n    }\n\n    vector<int> getNewsFeed(int userId) {\n        priority_queue<pair<int, int> > feed;\n        for (const auto& tweet : tweets[userId]) \n            feed.push(tweet);\n        \n        for (const auto& user : subscriptions[userId]) \n            for (const auto& tweet : tweets[user]) \n                feed.push(tweet);\n            \n        vector<int> result;\n        while (!feed.empty()) {\n            if (result.size() == maxFeed) \n                break;\n            result.push_back(feed.top().second);\n            feed.pop();\n        }\n        return result;\n    }\n\n    void follow(int followerId, int followeeId) {\n        if (followerId != followeeId) {\n            //if there is already such relation we do not need to do anything\n            auto it = address.find(getKey(followerId, followeeId));\n            if (it == end(address)) {\n                subscriptions[followerId].push_front(followeeId);\n                address[getKey(followerId, followeeId)] = begin(subscriptions[followerId]);    \n            }\n        }\n    }\n\n    void unfollow(int followerId, int followeeId) {\n        auto key = getKey(followerId, followeeId);\n        \n        //delete only if it exists\n        auto it = address.find(key);\n        if (it != end(address)) \n            subscriptions[followerId].erase(address[key]);    \n    }\nprivate:\n    int time, maxFeed;\n    unordered_map<int, deque<pair<int, int>>> tweets;\n    unordered_map<int, list<int>> subscriptions;\n    unordered_map<long, list<int>::iterator> address;\n    \n    long getKey(int followerId, int followeeId) {\n        return (long)followerId << 32 | (long)followeeId;\n    }\n};","compare_result":"1111111111111111","title_slug":"design-twitter"}