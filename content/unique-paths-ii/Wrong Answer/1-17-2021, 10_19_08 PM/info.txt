{"id":444123376,"lang":"cpp","time":"1 year, 5 months","timestamp":1610893148,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/444123376/","is_pending":"Not Pending","title":"Unique Paths II","memory":"N/A","code":"class Solution {\npublic:\n    int ans=0;\n    int m,n;\n    /*void dfs(vector<vector<int>>& obstacleGrid,int x,int y){\n        if(x>=m || y>=n) return;\n        if(obstacleGrid[x][y]==1) return;\n        if(x==m-1 && y==n-1) ans++;\n        dfs(obstacleGrid,x+1,y);\n        dfs(obstacleGrid,x,y+1); \n    }*/\n    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {\n        m=obstacleGrid.size();\n        n=obstacleGrid[0].size();\n        if(m==1 && n==1 && obstacleGrid[m-1][n-1]==1) return 0;\n        vector<vector<int>> path(m,vector<int>(n,0));\n        path[0][0]=1;\n        for(int x=0;x<m;x++){\n            for(int y=0;y<n;y++){\n                if(obstacleGrid[x][y]==1) continue;\n                if(x>0 && y>0)\n                    path[x][y]=path[x-1][y]+path[x][y-1];\n                else if(x==0 && y>0)\n                    path[x][y]=path[x][y-1];\n                else if(x>0 && y==0)\n                    path[x][y]=path[x-1][y];\n            }\n        }\n        //dfs(obstacleGrid,0,0,path);\n        return path[m-1][n-1];\n    }\n};","compare_result":"11111110111011110111111111011111111111111","title_slug":"unique-paths-ii"}