{"id":540190896,"lang":"cpp","time":"10 months, 1 week","timestamp":1629255129,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/540190896/","is_pending":"Not Pending","title":"Check Completeness of a Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isCompleteTree(TreeNode* root) {\n        queue<TreeNode*> q;\n        q.push(root);\n        bool flag=false;\n        while(!q.empty()){\n            TreeNode* t = q.front();\n            q.pop();\n            //cout<<t->val<<endl;\n            if(t==nullptr){\n                if(q.empty()){\n                    return true;\n                }\n                else{\n                    return false;\n                }\n            }\n            if(t->left==nullptr && t->right==nullptr){\n                continue;\n            }\n            q.push(t->left);\n            q.push(t->right);\n        }\n        return true;\n    }\n};","compare_result":"11111111111111111100110111111111001111111101101111101001111111111101101111111101101111111111111111111111111111111111111","title_slug":"check-completeness-of-a-binary-tree"}