{"id":495367326,"lang":"cpp","time":"1 year, 1 month","timestamp":1621435564,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/495367326/","is_pending":"Not Pending","title":"Binary Tree Cameras","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int dp[2021][2];\n    void dfs(TreeNode* r,int now){\n        if(r==nullptr) return;\n        dp[now][0]=dp[now][1]=0;\n        dfs(r->left,now*2);\n        dp[now][0]+=dp[now*2][1];\n        dp[now][1]+=min(dp[now*2][1],dp[now*2][0]);\n        dfs(r->right,now*2+1);\n        dp[now][0]+=dp[now*2+1][1];\n        dp[now][1]+=min(dp[now*2+1][1],dp[now*2+1][0]);\n        dp[now][1]++;\n    }\n    int minCameraCover(TreeNode* root) {\n        if(root==nullptr) return 0;\n        dfs(root,1);\n        return min(dp[1][0],dp[1][1]);\n    }\n};","compare_result":"11011111111111111111111111111111111111111111111111111111111111111110010100000001111111101001100100110000000011001011001100000100101100000010000000000000000000000000000000","title_slug":"binary-tree-cameras"}