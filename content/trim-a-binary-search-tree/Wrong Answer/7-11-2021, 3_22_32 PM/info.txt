{"id":520674356,"lang":"cpp","time":"11 months, 2 weeks","timestamp":1625988152,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/520674356/","is_pending":"Not Pending","title":"Trim a Binary Search Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int lo,hi;\n    TreeNode* re(TreeNode* root){\n        if(root==nullptr) return root;\n        if(root->val>hi){\n            return root->left;\n        }\n        else if(root->val<lo){\n            return root->right;\n        }\n        else{\n            root->left=re(root->left);\n            root->right=re(root->right);\n            return root;\n        }\n    }\n    TreeNode* trimBST(TreeNode* root, int low, int high) {\n        lo=low;\n        hi=high;\n        return re(root);\n    }\n};","compare_result":"111111111111101011111101111000000000000000000001010000000000000000000000000000","title_slug":"trim-a-binary-search-tree"}