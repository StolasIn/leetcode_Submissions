{"id":495351088,"lang":"cpp","time":"1 year, 1 month","timestamp":1621432803,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/495351088/","is_pending":"Not Pending","title":"Minimum Moves to Equal Array Elements II","memory":"10.9 MB","code":"class Solution {\npublic:\n    //找出pivot\n    int ans;\n    int partition1(vector<int> &arr,int left,int right){\n        int pivot_index=rand()%(right-left+1)+left;\n        int pivot=arr[pivot_index];\n        swap(arr[pivot_index],arr[right]);\n        int front1=left;\n        for(int cur=left;cur<=right;cur++){\n            if(arr[cur]>pivot){\n                swap(arr[cur],arr[front1]);\n                front1++;\n            }\n        }\n        swap(arr[front1],arr[right]);\n        return front1;\n    }\n    void quick_select(vector<int>& nums,int left,int right,int k){\n        if(left==right) {ans=nums[left]; return;}\n        if(right>left){\n            int pivot=partition1(nums,left,right);\n            if(k==pivot){\n                ans=nums[pivot];\n                return;\n            }\n            if(k>pivot){\n                quick_select(nums,pivot+1,right,k);\n            }\n            else if(k<pivot){\n                quick_select(nums,left,pivot-1,k);\n            }\n        }\n    }\n    int findKthLargest(vector<int>& nums, int k) {\n        if(nums.size()==1) return nums[0];\n        quick_select(nums,0,nums.size()-1,k-1);\n        return ans;\n    }\n    int minMoves2(vector<int>& nums) {\n        int m=nums.size();\n        double best;\n        int ans;\n        \n        if(m%2==0){\n            ans=(findKthLargest(nums,m/2)+findKthLargest(nums,m/2+1))/2;\n            /*if(best-floor(best)>0.5){\n                ans=(int)(best)+1;\n            }\n            else{\n                ans=(int)(best);\n            }*/\n        }\n        else{\n            ans=findKthLargest(nums,m/2+1);\n        }\n        //cout<<ans<<endl;\n        int sum=0;\n        for(int i=0;i<m;i++){\n            sum+=abs(nums[i]-ans);\n        }\n        return sum;\n    }\n};","compare_result":"111111111111111111111111111111","title_slug":"minimum-moves-to-equal-array-elements-ii"}