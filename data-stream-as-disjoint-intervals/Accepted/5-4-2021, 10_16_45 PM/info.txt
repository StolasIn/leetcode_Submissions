{"id":488765507,"lang":"cpp","time":"1 year, 1 month","timestamp":1620137805,"status_display":"Accepted","runtime":"56 ms","url":"/submissions/detail/488765507/","is_pending":"Not Pending","title":"Data Stream as Disjoint Intervals","memory":"33.3 MB","code":"class SummaryRanges {\npublic:\n    /** Initialize your data structure here. */\n    bool arr[10010];\n    int ma=-1;\n    SummaryRanges() {\n        memset(arr,false,sizeof(arr));\n    }\n    \n    void addNum(int val) {\n        arr[val]=true;\n        ma=max(ma,val);\n    }\n    \n    vector<vector<int>> getIntervals() {\n        vector<vector<int>> ans;\n        int key=0;\n        for(;key<=ma;key++){\n            if(arr[key]) break;\n        }\n        for(int i=key;i<=ma+1;){\n            if(arr[i]){\n                i++;\n            }\n            else{\n                ans.emplace_back(vector<int>{key,i-1});\n                key=i;\n                for(;key<=ma+1;key++){\n                    if(arr[key]) break;\n                }\n                if(key>=ma+1) break;\n                i=key;\n            }\n        }\n        return ans;\n    }\n};\n\n/**\n * Your SummaryRanges object will be instantiated and called as such:\n * SummaryRanges* obj = new SummaryRanges();\n * obj->addNum(val);\n * vector<vector<int>> param_2 = obj->getIntervals();\n */","compare_result":"111111111","title_slug":"data-stream-as-disjoint-intervals"}