{"id":520049672,"lang":"cpp","time":"11 months, 2 weeks","timestamp":1625882983,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/520049672/","is_pending":"Not Pending","title":"Design Circular Queue","memory":"N/A","code":"class MyCircularQueue {\npublic:\n    deque<int> dq;\n    int siz;\n    MyCircularQueue(int k) {\n        siz=k;\n    }\n    \n    bool enQueue(int value) {\n        if(isFull()==true){\n            return false;\n        }\n        dq.push_back(value);\n        return true;\n    }\n    \n    bool deQueue() {\n        if(isEmpty()==true) return false;\n        dq.pop_back();\n        return true;\n    }\n    \n    int Front() {\n        if(isEmpty()==true) return -1;\n        return dq.front();\n    }\n    \n    int Rear() {\n        if(isEmpty()==true) return -1;\n        return dq.back();\n    }\n    \n    bool isEmpty() {\n        return dq.empty();\n    }\n    \n    bool isFull() {\n        return dq.size()==siz? true:false;\n    }\n};\n\n/**\n * Your MyCircularQueue object will be instantiated and called as such:\n * MyCircularQueue* obj = new MyCircularQueue(k);\n * bool param_1 = obj->enQueue(value);\n * bool param_2 = obj->deQueue();\n * int param_3 = obj->Front();\n * int param_4 = obj->Rear();\n * bool param_5 = obj->isEmpty();\n * bool param_6 = obj->isFull();\n */","compare_result":"110101010111110000000000000000000000000000000000000001110","title_slug":"design-circular-queue"}