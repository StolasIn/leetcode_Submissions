{"id":547006934,"lang":"java","time":"9 months, 3 weeks","timestamp":1630379635,"status_display":"Accepted","runtime":"33 ms","url":"/submissions/detail/547006934/","is_pending":"Not Pending","title":"4Sum","memory":"51.9 MB","code":"class Solution {\n    public List<List<Integer>> fourSum(int[] nums, int target) {\n        Arrays.sort(nums);\n        \n        return anySum(nums, 0, 4, target);\n    }\n    \n    List<List<Integer>> anySum(int nums[], int start, int k, int target) {\n        List<List<Integer>> answer = new ArrayList<>();\n        if(k == 2) {\n            answer = twoSum(nums, start, target);\n        } else {\n            for (int i = start; i<nums.length - (k - 1); i++) {\n                if(i > start && nums[i] == nums[i - 1]) continue;\n                List<List<Integer>> temp = anySum(nums, i + 1, k-1, target-nums[i]);\n                for(List<Integer> t : temp) {\n                       t.add(0, nums[i]);\n                } \n                answer.addAll(temp);\n            }\n            \n        }\n        return answer;\n    }\n    \n    private List<List<Integer>> twoSum(int [] nums, int start, int target) {\n        int end = nums.length-1;\n        List<List<Integer>> twoSumList = new ArrayList<>();\n        \n        while(start<end) {\n            if(nums[start]+nums[end] == target) {\n                List<Integer> nestedList = new ArrayList<>();\n                nestedList.add(nums[start]);\n                nestedList.add(nums[end]);\n                twoSumList.add(nestedList);\n                while(start < end && nums[start+1] == nums[start]) start++;\n                while(start < end && nums[end-1] == nums[end]) end--;\n                start++;\n                end--;\n            } else if(nums[start]+nums[end] > target) {\n                end--;\n            } else {\n                start++;\n            }\n        }\n        \n        return twoSumList;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"4sum"}