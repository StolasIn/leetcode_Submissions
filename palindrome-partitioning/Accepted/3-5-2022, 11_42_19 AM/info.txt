{"id":653551453,"lang":"cpp","time":"3 months, 2 weeks","timestamp":1646451739,"status_display":"Accepted","runtime":"80 ms","url":"/submissions/detail/653551453/","is_pending":"Not Pending","title":"Palindrome Partitioning","memory":"49.3 MB","code":"class Solution {\npublic:\n    vector<vector<string>> partition(string s) {\n        vector<vector<string>> result;\n        vector<string> currentList;\n        dfs(result, s, 0, currentList);\n        return result;\n    }\n\n    void dfs(vector<vector<string>> &result, string &s, int start, vector<string> &currentList) {\n        if (start >= s.length()) result.push_back(currentList);\n        for (int end = start; end < s.length(); end++) {\n            if (isPalindrome(s, start, end)) {\n                // add current substring in the currentList\n                currentList.push_back(s.substr(start, end - start + 1));\n                dfs(result, s, end + 1, currentList);\n                // backtrack and remove the current substring from currentList\n                currentList.pop_back();\n            }\n        }\n    }\n\n    bool isPalindrome(string &s, int low, int high) {\n        while (low < high) {\n            if (s[low++] != s[high--]) return false;\n        }\n        return true;\n    }\n};\n","compare_result":"11111111111111111111111111111111","title_slug":"palindrome-partitioning"}