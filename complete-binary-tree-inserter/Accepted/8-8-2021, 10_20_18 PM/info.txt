{"id":535259768,"lang":"cpp","time":"10 months, 2 weeks","timestamp":1628432418,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/535259768/","is_pending":"Not Pending","title":"Complete Binary Tree Inserter","memory":"22.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass CBTInserter {\npublic:\n    vector<TreeNode*> v;\n    CBTInserter(TreeNode* root) {\n        v.emplace_back(nullptr);\n        queue<TreeNode*> q;\n        q.push(root);\n        while(!q.empty()){\n            auto t = q.front();\n            q.pop();\n            if(t==nullptr) continue;\n            v.emplace_back(t);\n            q.push(t->left);\n            q.push(t->right);\n        }\n    }\n    int insert(int val) {\n        TreeNode* tmp = new TreeNode(val);\n        v.emplace_back(tmp);\n        int t=v.size()-1;\n        if(t%2==0){\n            v[t/2]->left=tmp;\n        }\n        else{\n            v[t/2]->right=tmp;\n        }\n        return v[t/2]->val;\n    }\n    \n    TreeNode* get_root() {\n        return v[1];\n    }\n};\n\n/**\n * Your CBTInserter object will be instantiated and called as such:\n * CBTInserter* obj = new CBTInserter(root);\n * int param_1 = obj->insert(val);\n * TreeNode* param_2 = obj->get_root();\n */","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"complete-binary-tree-inserter"}