{"id":448387637,"lang":"cpp","time":"1 year, 4 months","timestamp":1611727039,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/448387637/","is_pending":"Not Pending","title":"Balanced Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int height(TreeNode* root){\n        if(root==nullptr) return 0;\n        int x=height(root->left);\n        int y=height(root->right);\n        root->val=max(x,y);\n        return (x>y ? x : y)+1;\n    }\n    bool check(TreeNode* root){\n        if(root->left==nullptr || root->right==nullptr) return true;\n        if(abs(root->left->val-root->right->val)>=2) return false;\n        else{\n            return check(root->left) && check(root->right);\n        }\n    }\n    bool isBalanced(TreeNode* root) {\n        if(root==nullptr) return root;\n        height(root);\n        return check(root);\n    }\n};","compare_result":"110111010100011011000000000111100000000000000000001111111111111100000000000000000000000000000000000000000000000000000000111111111111110010000100000011000011111111111111000000000000000000000000000000000000000000111111111111111110","title_slug":"balanced-binary-tree"}