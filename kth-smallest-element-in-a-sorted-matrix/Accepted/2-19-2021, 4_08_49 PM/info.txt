{"id":457916306,"lang":"cpp","time":"1 year, 4 months","timestamp":1613722129,"status_display":"Accepted","runtime":"24 ms","url":"/submissions/detail/457916306/","is_pending":"Not Pending","title":"Kth Smallest Element in a Sorted Matrix","memory":"14.6 MB","code":"class Solution {\npublic:\n    //找出pivot\n    int ans;\n    int partition1(vector<int> &arr,int left,int right){\n        int pivot_index=rand()%(right-left+1)+left;\n        int pivot=arr[pivot_index];\n        swap(arr[pivot_index],arr[right]);\n        int front1=left;\n        for(int cur=left;cur<=right;cur++){\n            if(arr[cur]<pivot){\n                swap(arr[cur],arr[front1]);\n                front1++;\n            }\n        }\n        swap(arr[front1],arr[right]);\n        return front1;\n    }\n    void quick_select(vector<int>& nums,int left,int right,int k){\n        if(left==right) {ans=nums[left]; return;}\n        if(right>left){\n            int pivot=partition1(nums,left,right);\n            if(k==pivot){\n                ans=nums[pivot];\n                return;\n            }\n            if(k>pivot){\n                quick_select(nums,pivot+1,right,k);\n            }\n            else if(k<pivot){\n                quick_select(nums,left,pivot-1,k);\n            }\n        }\n    }\n    int findKthLargest(vector<int>& nums, int k) {\n        if(nums.size()==1) return nums[0];\n        quick_select(nums,0,nums.size()-1,k-1);\n        return ans;\n    }\n    int kthSmallest(vector<vector<int>>& matrix, int k) {\n        vector<int> t;\n        int m=matrix.size();\n        for(int i=0;i<m;i++){\n            t.insert(t.end(),matrix[i].begin(),matrix[i].end());\n        }\n        return findKthLargest(t,k);\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"kth-smallest-element-in-a-sorted-matrix"}