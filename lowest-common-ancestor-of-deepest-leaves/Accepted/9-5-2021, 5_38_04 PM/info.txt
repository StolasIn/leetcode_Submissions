{"id":549801138,"lang":"cpp","time":"9 months, 2 weeks","timestamp":1630834684,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/549801138/","is_pending":"Not Pending","title":"Lowest Common Ancestor of Deepest Leaves","memory":"21.2 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int h;\n    TreeNode* ans;\n    int dep(TreeNode* r){\n        if(r==nullptr) return 0;\n        int x = dep(r->left);\n        int y = dep(r->right);\n        return max(x,y)+1;\n    }\n    int re(TreeNode* r,int dis){\n        if(r==nullptr) return dis;\n        int x = re(r->left,dis+1);\n        int y = re(r->right,dis+1);\n        if(x==h && y==h){\n            ans=r;\n        }\n        return max(x,y);\n    }\n    TreeNode* lcaDeepestLeaves(TreeNode* root) {\n        h=dep(root);\n        re(root,0);\n        return ans;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-deepest-leaves"}