{"id":530859820,"lang":"cpp","time":"10 months, 3 weeks","timestamp":1627695683,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/530859820/","is_pending":"Not Pending","title":"Smallest Subtree with all the Deepest Nodes","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int hei;\n    TreeNode* ans;\n    int dfs1(TreeNode* root){\n        if(root==nullptr) return 0;\n        int x=dfs1(root->left);\n        int y=dfs1(root->right);\n        return max(x,y)+1;\n    }\n    int dfs2(TreeNode* root,int dis){\n        if(root==nullptr) return 0;\n        int x=dfs2(root->left,dis+1);\n        int y=dfs2(root->right,dis+1);\n        if(x==y && x==hei-1){\n            ans=root;\n        }\n        return dis;\n    }\n    TreeNode* subtreeWithAllDeepest(TreeNode* root) {\n        hei=dfs1(root);\n        dfs2(root,0);\n        return ans;\n    }\n};","compare_result":"1100100000001000000011000000000000000000000000000010100000","title_slug":"smallest-subtree-with-all-the-deepest-nodes"}