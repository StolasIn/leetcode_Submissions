{"id":515780080,"lang":"java","time":"11 months, 3 weeks","timestamp":1625130743,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/515780080/","is_pending":"Not Pending","title":"Merge k Sorted Lists","memory":"39.8 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass node implements Comparable<node>{\n    int siz;\n    ListNode ptr;\n    node(){}\n    node(int size,ListNode l){\n        this.siz=size;\n        this.ptr=l;\n    }\n    @Override\n    public int compareTo(node a){\n        return this.siz-a.siz;\n    }\n}\nclass Solution {\n    public int size(ListNode l){\n        int ans=0;\n        ListNode tmp=l;\n        while(tmp!=null){\n            ans++;\n            tmp=tmp.next;\n        }\n        return ans;\n    }\n    public node merge(node c,node d){\n        ListNode a=c.ptr;\n        ListNode b=d.ptr;\n        ListNode tmp=new ListNode();\n        ListNode head=tmp;\n        while(a!=null || b!=null){\n            if(a==null){\n                tmp.val=b.val;\n                b=b.next;\n                if(b!=null){\n                    tmp.next=new ListNode();\n                    if(b!=null) tmp=tmp.next;\n                }\n            }\n            else if(b==null){\n                tmp.val=a.val;\n                a=a.next;\n                if(a!=null){\n                    tmp.next=new ListNode();\n                    tmp=tmp.next;\n                }\n            }\n            else{\n                if(a.val>b.val){\n                    tmp.val=b.val;\n                    b=b.next;\n                    tmp.next=new ListNode();\n                    tmp=tmp.next;\n                }\n                else{\n                    tmp.val=a.val;\n                    a=a.next;\n                    tmp.next=new ListNode();\n                    tmp=tmp.next;\n                }\n            }\n        }\n        return new node(c.siz+d.siz,head);\n    }\n    public ListNode mergeKLists(ListNode[] lists) {\n        PriorityQueue<node> pq=new PriorityQueue<node>();\n        for(int i=0;i<lists.length;i++){\n            int s=size(lists[i]);\n            if(s!=0) pq.add(new node(s,lists[i]));\n        }\n        while(pq.size()>1){\n            node t1=pq.poll();\n            node t2=pq.poll();\n            pq.add(merge(t1,t2));\n        }\n        if(pq.size()==0 || pq.peek().siz==0) return null;\n        return pq.peek().ptr;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-k-sorted-lists"}