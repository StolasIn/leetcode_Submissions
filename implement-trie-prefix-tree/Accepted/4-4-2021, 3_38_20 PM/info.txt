{"id":476272152,"lang":"cpp","time":"1 year, 2 months","timestamp":1617521900,"status_display":"Accepted","runtime":"156 ms","url":"/submissions/detail/476272152/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"229.5 MB","code":"class tn{\npublic:\n    vector<tn*> link;\n    tn(){\n        link.assign(27,nullptr);\n    }\n};\nclass Trie {\npublic:\n    /** Initialize your data structure here. */\n    tn* root;\n    Trie() {\n        root=new tn();\n    }\n    \n    /** Inserts a word into the trie. */\n    void insert(string word) {\n        insert_u(word,0,root);\n    }\n    \n    /** Returns if the word is in the trie. */\n    bool search(string word) {\n        return search_u(word,0,root);\n    }\n    \n    /** Returns if there is any word in the trie that starts with the given prefix. */\n    bool startsWith(string prefix) {\n        return start_with_u(prefix,0,root);\n    }\nprivate:\n    void insert_u(string word,int idx,tn* r){\n        if(idx>=word.size()){\n            r->link[26] = new tn();\n            return;\n        }\n        if(r->link[word[idx]-'a']==nullptr){\n            r->link[word[idx]-'a'] = new tn();\n            insert_u(word,idx+1,r->link[word[idx]-'a']);\n        }\n        else{\n            insert_u(word,idx+1,r->link[word[idx]-'a']);\n        }\n    }\n    bool search_u(string word,int idx,tn* r){\n        if(r==nullptr) return false;\n        if(idx>=word.size()) return false;\n        if(idx==(word.size()-1) && r->link[word[idx]-'a']!=nullptr){\n            if(r->link[word[idx]-'a']->link[26]!=nullptr){\n                return true;\n            }\n            else{\n                return false;\n            }\n        }\n        return search_u(word,idx+1,r->link[word[idx]-'a']);\n    }\n    bool start_with_u(string word,int idx,tn* r){\n        if(r==nullptr) return false;\n        if(idx>=word.size()) return false;\n        if(idx==(word.size()-1) && r->link[word[idx]-'a']!=nullptr){\n            for(auto i : r->link[word[idx]-'a']->link){\n                if(i!=nullptr){\n                    return true;\n                }\n            }\n            return false;\n        }\n        return start_with_u(word,idx+1,r->link[word[idx]-'a']);\n    }\n};\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie* obj = new Trie();\n * obj->insert(word);\n * bool param_2 = obj->search(word);\n * bool param_3 = obj->startsWith(prefix);\n */","compare_result":"111111111111111","title_slug":"implement-trie-prefix-tree"}