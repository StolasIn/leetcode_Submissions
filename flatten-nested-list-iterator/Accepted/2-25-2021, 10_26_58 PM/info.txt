{"id":460547580,"lang":"cpp","time":"1 year, 3 months","timestamp":1614263218,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/460547580/","is_pending":"Not Pending","title":"Flatten Nested List Iterator","memory":"14.7 MB","code":"/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n *   public:\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     bool isInteger() const;\n *\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\n *     // The result is undefined if this NestedInteger holds a nested list\n *     int getInteger() const;\n *\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\n *     // The result is undefined if this NestedInteger holds a single integer\n *     const vector<NestedInteger> &getList() const;\n * };\n */\n\nclass NestedIterator {\npublic:\n    vector<int> ans;\n    int cnt=0;\n    NestedIterator(vector<NestedInteger> &n) {\n        for(auto i:n){\n            if(i.isInteger()){\n                ans.emplace_back(i.getInteger());\n            }\n            else{\n                NestedIterator it=NestedIterator(i.getList());\n                while(it.hasNext()) ans.emplace_back(it.next());\n            }\n        }\n    }\n    \n    int next() {\n        return ans[cnt++];\n    }\n    \n    bool hasNext() {\n        return (cnt<ans.size());\n    }\n};\n\n/**\n * Your NestedIterator object will be instantiated and called as such:\n * NestedIterator i(nestedList);\n * while (i.hasNext()) cout << i.next();\n */","compare_result":"11111111111111111111111111111111111111111111","title_slug":"flatten-nested-list-iterator"}