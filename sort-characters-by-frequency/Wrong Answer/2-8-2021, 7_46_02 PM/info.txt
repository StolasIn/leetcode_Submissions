{"id":453599810,"lang":"cpp","time":"1 year, 4 months","timestamp":1612784762,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/453599810/","is_pending":"Not Pending","title":"Sort Characters By Frequency","memory":"N/A","code":"class Solution {\npublic:\n    vector<int> ch;\n    int partition1(string &arr,int left,int right){\n\tint pivot_index=rand()%(right-left+1)+left;\n    int pivot=arr[pivot_index]; //令陣列的最後一個元素是pivot\n    swap(arr[pivot_index],arr[right]);\n    int front1=left; //front1用來交換元素\n    for(int cur=left;cur<=right;cur++){ //cur枚舉陣列的所有元素\n        if(ch[arr[cur]]>ch[pivot]){ //如果當前的元素比pivot小，就擺到左邊\n            swap(arr[cur],arr[front1]); //互換\n            front1++; //替換的位置加1\n        }\n    }\n    //把pivot換到目前陣列front1+1的位置，就可以確保在pivot左邊的元素都比pivot小\n    swap(arr[front1],arr[right]);\n    return front1;//把pivot回傳\n}\nvoid quick_sort(string &arr,int left,int right){\n    if(right>left){\n        int pivot = partition1(arr,left,right); //找到pivot\n        quick_sort(arr,left,pivot-1); //分別對pivot左邊右邊的陣列做一次quick_sort，因為pivot一定在陣列的中間所以不用排序\n        quick_sort(arr,pivot+1,right);\n    }\n}\n    string frequencySort(string s) {\n        ch=vector<int>(128,0);\n        int m=s.size();\n        for(int i=0;i<m;i++){\n            ch[s[i]]++;\n        }\n        quick_sort(s,0,s.size()-1);\n        return s;\n    }\n};","compare_result":"10111111111101111010011010011110000","title_slug":"sort-characters-by-frequency"}