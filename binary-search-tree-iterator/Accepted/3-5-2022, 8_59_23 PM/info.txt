{"id":653770546,"lang":"cpp","time":"3 months, 2 weeks","timestamp":1646485163,"status_display":"Accepted","runtime":"70 ms","url":"/submissions/detail/653770546/","is_pending":"Not Pending","title":"Binary Search Tree Iterator","memory":"25.2 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass BSTIterator {\npublic:\n    TreeNode* r;\n    map<TreeNode*,TreeNode*> par;\n    void built(TreeNode* r){\n        if(r==nullptr){\n            return;\n        }\n        if(r->left!=nullptr){\n            par[r->left] = r;\n        }\n        if(r->right!=nullptr){\n            par[r->right] = r;\n        }\n        built(r->left);\n        built(r->right);\n    }\n    BSTIterator(TreeNode* root) {\n        r = root;\n        par[root] = nullptr;\n        built(root);\n        while(r->left!=nullptr){\n            r = r->left;\n        }\n    }\n    \n    int next() {\n        int ans = r->val;\n        if(r->right!=nullptr){\n            r = r->right;\n            while(r->left!=nullptr){\n                r = r->left;\n            }\n        }\n        else{\n            while(par[r]!=nullptr && par[r]->right==r){\n                r = par[r];\n            }\n            r = par[r];\n        }\n        return ans;\n    }\n    \n    bool hasNext() {\n        return r!=nullptr;\n    }\n};\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * BSTIterator* obj = new BSTIterator(root);\n * int param_1 = obj->next();\n * bool param_2 = obj->hasNext();\n */","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-search-tree-iterator"}