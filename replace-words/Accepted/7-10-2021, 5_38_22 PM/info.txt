{"id":520194260,"lang":"cpp","time":"11 months, 2 weeks","timestamp":1625909902,"status_display":"Accepted","runtime":"72 ms","url":"/submissions/detail/520194260/","is_pending":"Not Pending","title":"Replace Words","memory":"56.3 MB","code":"class trie_node{\npublic:\n    bool isend;\n    vector<trie_node*> link;\n    trie_node(){\n        isend=false;\n        link.assign(26,nullptr);\n    }\n};\nclass Trie {\npublic:\n    /** Initialize your data structure here. */\n    trie_node* root;\n    trie_node* trie_pointer;\n    int counter;\n    Trie() {\n        root=new trie_node();\n    }\n    /** Inserts a word into the trie. */\n    void insert(string& word) {\n        counter=0;\n        int m=word.size();\n        trie_pointer=root;\n        while(counter<word.size()){\n            if(trie_pointer->link[word[counter]-'a']==nullptr){\n                trie_pointer->link[word[counter]-'a']=new trie_node();\n            }\n            trie_pointer=trie_pointer->link[word[counter]-'a'];\n            counter++;\n        }\n        trie_pointer->isend=true;\n    }\n    \n    /** Returns if the word is in the trie. */\n    string search(string& word) {\n        trie_pointer=root;\n        counter=0;\n        string str;\n        while(trie_pointer!=nullptr && counter<word.size()){\n            if(trie_pointer->isend==true){\n                return str;\n            }\n            str+=word[counter];\n            trie_pointer=trie_pointer->link[word[counter++]-'a'];\n        }\n        /*if(trie_pointer==nullptr) return false;\n        if(trie_pointer->isend==false) return false;\n        return true;*/\n        return word;\n    }\n    \n    /** Returns if there is any word in the trie that starts with the given prefix. */\n    bool startsWith(string& prefix) {\n        trie_pointer=root;\n        counter=0;\n        while(trie_pointer!=nullptr && counter<prefix.size()){\n            trie_pointer=trie_pointer->link[prefix[counter++]-'a'];\n        }\n        if(trie_pointer==nullptr) return false;\n        else{\n            if(trie_pointer->isend==true) return true;\n            for(int i=0;i<26;i++){\n                if(trie_pointer->link[i]!=nullptr){\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n};\nclass Solution {\npublic:\n    vector<string> split(const string& str, const string& delim) {\n        vector<string> res;\n        if(\"\" == str) return res;\n        char * strs = new char[str.length() + 1] ;\n        strcpy(strs, str.c_str()); \n        char * d = new char[delim.length() + 1];\n        strcpy(d, delim.c_str());\n        char *p = strtok(strs, d);\n        while(p) {\n            string s = p;\n            res.push_back(s);\n            p = strtok(NULL, d);\n        }\n        return res;\n    }\n    string replaceWords(vector<string>& d, string& s) {\n        Trie t;\n        for(int i=0;i<d.size();i++){\n            t.insert(d[i]);\n        }\n        string ans=\"\";\n        vector<string> tok;\n        string dim=\" \";\n        tok=split(s,dim);\n        for(int i=0;i<tok.size();i++){\n            ans+=t.search(tok[i]);\n            if(i!=tok.size()-1) ans+=\" \";\n        }\n        return ans;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"replace-words"}